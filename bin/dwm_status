#!/bin/bash

# This function parses /proc/net/dev file searching for a line containing $interface data.
# Within that line, the first and ninth numbers after ':' are respectively the received and transmited bytes.
function get_bytes {
	# Find active network interface
	interface=$(ip route get 8.8.8.8 2>/dev/null| awk '{print $5}')
	line=$(grep $interface /proc/net/dev | cut -d ':' -f 2 | awk '{print "received_bytes="$1, "transmitted_bytes="$9}')
	eval $line
	now=$(date +%s%N)
}

function get_velocity {
	value=$1
	old_value=$2
	now=$3
	timediff=$(($now - $old_time))
	velKB=$(echo "1000000000*($value-$old_value)/1000/$timediff" | bc)
	if test "$velKB" -gt 1000; then
		echo $(echo "scale=2; $velKB/1000" | bc) MB/s
	else
		echo ${velKB} kB/s
	fi
}

# Get initial values
get_bytes
old_received_bytes=$received_bytes
old_transmitted_bytes=$transmitted_bytes
old_time=$now

print_volume() {
	volume="$(amixer get Master | tail -n1 | sed -r 's/.*\[(.*)%\].*/\1/')"
	if amixer get Master | grep -q off; then
		echo -e "🔇   "
	elif test "$volume" -eq 100; then
		echo -e "🔊 ${volume} %   "
	elif test "$volume" -gt 0; then
		echo -e "🔉 ${volume} %   "
	elif test "$volume" -eq 0; then
		echo -e "🔈 ${volume} %   "
	fi
}

print_wifi() {
	ip=$(ip route get 8.8.8.8 2>/dev/null|grep -Eo 'src [0-9.]+'|grep -Eo '[0-9.]+')

	if hash iw
	then
		wifi=$(iw wlp2s0 link | grep SSID | sed 's,.*SSID: ,,')
		# connectedto=$(iw wlp2s0 link | grep Connected | awk '{print $3}' | cut -c 10-)
		echo -e "📶 $wifi $ip   "
	fi
}

print_mem(){
	memfree=$(($(grep -m1 'MemAvailable:' /proc/meminfo | awk '{print $2}') / 1000))
	echo -e "$memfree MB  "
}

# print_temp(){
# 	test -f /sys/class/thermal/thermal_zone0/temp || return 0
# 	echo $(head -c 2 /sys/class/thermal/thermal_zone0/temp) °C
# }

print_bat(){
	# maybe 🔌 would be nice if the device is plugged in
	hash acpi || return 0
	onl="$(grep "on-line" <(acpi -V))"
	charge="$(cat /sys/class/power_supply/BAT0/capacity)"
	if [[ ( -z $onl && ${charge} -gt 20 ) ]]; then
		echo -e "🔋 ${charge}   "
	elif [[ ( -z $onl && ${charge} -le 20 ) ]]; then
		echo -e "🔋 ${charge}   "
	else
		echo -e "🔋 ${charge}   "
	fi
}

print_date(){
	date +"%a %e. %R %Z"
}

while true
do
	# Get new transmitted, received byte number values and current time
	get_bytes

	# Calculates speeds
	vel_recv=$(get_velocity $received_bytes $old_received_bytes $now)
	vel_trans=$(get_velocity $transmitted_bytes $old_transmitted_bytes $now)

	xsetroot -name "🐏 $(print_mem)⬇️ $vel_recv ⬆️ $vel_trans   $(print_wifi)$(print_bat)$(print_volume)📅  $(print_date)"

	# Update old values to perform new calculations
	old_received_bytes=$received_bytes
	old_transmitted_bytes=$transmitted_bytes
	old_time=$now

	sleep 1
done
